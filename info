import * as THREE from 'three';
import { FontLoader } from 'three/examples/jsm/loaders/FontLoader';
import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';

let renderer: THREE.WebGLRenderer;
let camera: THREE.PerspectiveCamera;
let scenes: THREE.Scene[] = [];
let currentScene = 0;
let targetScene = 0; // Целевая сцена для плавного перехода
let transitionProgress = 0; // Прогресс перехода от 0 до 1

// Инициализация сцены
function init(): void {
    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.getElementById('canvas-container')?.appendChild(renderer.domElement);

    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.z = 5;

    scenes[0] = createScene('Home', 0x3498db);
    scenes[1] = createScene('About', 0xe74c3c);
    scenes[2] = createScene('Contact', 0x2ecc71);

    animate();

    window.addEventListener('wheel', handleScroll);
}

// Создание сцены с текстом
function createScene(text: string, color: number): THREE.Scene {
    const newScene = new THREE.Scene();
    newScene.background = new THREE.Color(color);

    const loader = new FontLoader();
    loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', (font: any) => {
        const textGeometry = new TextGeometry(text, {
            font: font,
            size: 1,
            height: 0.2,
        });
        const textMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });
        const mesh = new THREE.Mesh(textGeometry, textMaterial);
        mesh.position.set(-2, 0, 0);
        newScene.add(mesh);
    });

    return newScene;
}

// Анимация
function animate(): void {
    requestAnimationFrame(animate);

    // Плавный переход между сценами
    if (currentScene !== targetScene) {
        transitionProgress += 0.05; // Скорость перехода (чем больше, тем быстрее)
        if (transitionProgress >= 1) {
            transitionProgress = 1;
            currentScene = targetScene; // Завершаем переход на целевую сцену
        }
    } else {
        transitionProgress = 0; // Сбрасываем прогресс перехода
    }

    // Рендерим текущую сцену
    renderer.render(scenes[currentScene], camera);
}

// Переключение сцены по скроллу
function handleScroll(event: WheelEvent): void {
    if (event.deltaY > 0) {
        if (targetScene < scenes.length - 1) {
            targetScene++;
        }
    } else {
        if (targetScene > 0) {
            targetScene--;
        }
    }
}

// Адаптация к изменению размера окна
window.addEventListener('resize', () => {
    renderer.setSize(window.innerWidth, window.innerHeight);
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
});

init();
